library IEEE;
use IEEE.STD_LOGIC_1164.all;

entity Set_Tb is
end Set_Tb;

architecture Simulation of Set_Tb is
	signal s_clk, s_reset, s_Game1, s_Game2, s_enable: std_logic;
	
	signal s_Match1, s_Match2: std_logic;
	signal s_dOut1, s_dOut2 : std_logic_vector(2 downto 0);
begin
	uut: entity work.Set(Behav)
		  port map(clk     => s_clk,
					  reset   => s_reset,
				     Game1   => s_Game1,
				     Game2   => s_Game2,
				     enable  => s_enable,
				     Match1  => s_Match1,
				     Match2  => s_Match2,
				     dOut1   => s_dOut1,
				     dOut2   => s_dOut2);

	clk_proc: process
	begin
		s_clk <= '0'; wait for 100 ns;
		s_clk <= '1'; wait for 100 ns;		--rising_edge nos 100 ns, 300 ns, 500 ns...
	end process;
	
	stim_proc: process
	begin
		s_reset  <= '1';
		s_enable <= '1';
		s_Game1  <= '0';
		s_Game2  <= '0';
		wait for 110 ns;		
		
		s_reset <= '0';
		wait for 15 ns;		--125ns
		
		s_Game1 <= '1';
		wait for 190 ns;
		
		s_Game1 <= '0';
		wait for 10 ns;
		
		s_Game1 <= '1';
		wait for 190 ns;
		
		s_Game1 <= '0';
		wait for 10 ns;
		
		--s_Game1 <= '1';
		--wait for 1225 ns;    -- 1350 ns
		
		s_Game1 <= '0';
		s_Game2 <= '1';
		wait for 1225 ns;    -- 2575 ns
		
		s_Game1 <= '1';
		s_Game2 <= '0';
		wait for 1050 ns;  -- 2125 ns
		
		s_Game1 <= '0';
		s_Game2 <= '1';
		wait for 1025 ns;  --2750 ns
		
		s_Game1 <= '1';
		s_Game2 <= '0';
		wait for 225 ns;   --2975 ns;
	
		s_Game1 <= '0';
		s_Game2 <= '1';		
		wait for 450 ns;		--3425 ns;
		
	end process;
end Simulation;